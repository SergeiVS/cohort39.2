import java.util.Arrays;

public class BinarySearch {
    public static void main(String[] args) {
        /*
        {10, 29, 33, 47, 52, 646 723, 818, 999} - исходный массив

        элемент для поиска - 47;

        1-ая итерация:
        находим средний элемент -> index = 4, element = 52
        сравниваем наш элемент для поиска с этим "средним элементом"
        так как наш элемент поиска меньше чем значение "среднего элемента", то:

        2-я итерация происходи с "левой частью" нашего массива, то есть мы будем
        искать наш элемент среди {10, 29, 33, 47, 52}

        находим "средний" элемент, но уже из {10, 29, 33, 47, 52}
        средний element = 33 и его index = 2
        сравниваем наш элемент для поиска с этим (вторым уже) "средним" элементом

        3-я итерация происходит теперь уже с "правой" частью массива {10, 29, 33, 47, 52},
        то есть мы будем искать наш элемент среди {33, 47, 52}

        находим средний элемент -> element = 47 c index = 3
        сравниваем это "средний" элемент с нашим числом
        элемент совпал - поиск закончен - индекс нашего элемента = 3


        ======================================================================

        {1,3,5,7,9,12,15,19,21,26,29,35,39,43,48,50,100} - 17 элементов

        ищем число 19

        1-ая итерация - > 17 /2 = 8.5
        int (8.5) = 8

         {1,3,5,7,9,12,15,19,21,26,29,35,39,43,48,50,100}
          "середина" имеет индекс 8 и равно 21
          сравниваем элемент поиска 19 со значением элемента массива у которого индекс = 8, т.е. с 21

          2-я итерация
          поиск будет проводиться среди элементов "левой" части нашего массива: {1,3,5,7,9,12,15,19,21}
          8 / 2 = 4
          "Средний" элемент среди текущей выбоки из нашего массива с индексом 4 -> 9
          сравниваем наш элемент поиска 19 со значением элемента массива у которого индекс 4 (значение 9)

          3-я итерация
           поиск будет проводиться среди элементов "правой" части нашего массива: {9,12,15,19,21}

         "Средний" элемент среди текущей выбоки из нашего массива с индексом 6 -> 15
          сравниваем наш элемент поиска 19 со значением элемента массива у которого индекс 6 (значение 15)

           4-я итерация
           поиск будет проводиться среди элементов "правой" части нашего массива: {15,19,21}

         "Средний" элемент среди текущей выбоки из нашего массива с индексом 7 -> 19
          сравниваем наш элемент поиска 19 со значением элемента массива у которого индекс 7 (значение 19)

         элементы равны - поиск завершен и возвратить индекс 7 - где находится наш элемент поиска в массиве

          8 000 000
          4 000 000
          2 000 000
          1 000 000
          500 000
          250 000
          125 000
          62 500
          31 250
          15 625
          7 812
          3 906
          1 953
          976
          488
          244
          122
          61
          30
          15
          7
          3
          1


         */

        int[] array = {1,3,5,7,9,12,15,19,21,26,29,35,39,43,48,50,100};
        System.out.println(Arrays.binarySearch(array, 19));
    }
}
